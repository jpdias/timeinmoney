package com.toostronk.timeinmoney;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import android.test.suitebuilder.annotation.SmallTest;
import android.content.Context;
import junit.framework.AssertionFailedError;
import junit.framework.TestCase;

public class Data implements Serializable 
{
    private static final long serialVersionUID = 1L;

    public String name;
    public String type;
    public double cost;
    public String data;
    public String notes;

    public boolean classEnabled;


    public Data(String title, String startTime, boolean enable) {
        this.name=name;
        this.type=type;
        this.cost=cost;
        this.data=data;
        this.notes=notes;
        this.classEnabled = enable;
    }

    public boolean saveObject(Data obj) {   
        final File suspend_f=new File(SerializationTest.cacheDir, "test");

        FileOutputStream   fos  = null;
        ObjectOutputStream oos  = null;
        boolean            keep = true;

        try {
            fos = new FileOutputStream(suspend_f);
            oos = new ObjectOutputStream(fos);
            oos.writeObject(obj);
        } catch (Exception e) {
            keep = false;
        } finally {
            try {
                if (oos != null)   oos.close();
                if (fos != null)   fos.close();
                if (keep == false) suspend_f.delete();
        } catch (Exception e) { /* do nothing */ }
        }

        return keep;
    }

    public Data getObject(Context c) {
        final File suspend_f=new File(SerializationTest.cacheDir, "test");

        Data simpleClass= null;
        FileInputStream fis = null;
        ObjectInputStream is = null;

        try {
            fis = new FileInputStream(suspend_f);
            is = new ObjectInputStream(fis);
            simpleClass = (Data) is.readObject();
        } catch(Exception e) {
            String val= e.getMessage();
        } finally {
            try {
                if (fis != null)   fis.close();
                if (is != null)   is.close();
            } catch (Exception e) { }
        }

        return simpleClass;  
    }
}